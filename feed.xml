<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-05T16:00:44+03:00</updated><id>http://localhost:4000/</id><title type="html">Akın Abdullahoğlu - Software Developer</title><subtitle>Yazılım Geliştiricisi, Blogger, Open-Source Lover</subtitle><entry><title type="html">Abstract Class Interface Arasindaki Fark?</title><link href="http://localhost:4000/Abstract-Class-ve-Interface-Nedir/" rel="alternate" type="text/html" title="Abstract Class Interface Arasindaki Fark?" /><published>2016-10-22T17:35:41+03:00</published><updated>2016-10-22T17:35:41+03:00</updated><id>http://localhost:4000/Abstract%20Class%20ve%20Interface%20Nedir</id><content type="html" xml:base="http://localhost:4000/Abstract-Class-ve-Interface-Nedir/">&lt;p&gt;Merhaba arkadaşlar, bugün sizlerle paylaşmak istediğim konu C# programlama dili içerisinde bulunan &lt;strong&gt;Class&lt;/strong&gt; ve &lt;strong&gt;Interface&lt;/strong&gt; yapıları ve aralarındaki farklar hakkında olacak. Öncelikle &lt;strong&gt;Class&lt;/strong&gt;(Sınıf) nedir bu konuya değinelim, Class içerisinde metotlar, değişkenler hatta yine sınıf tanımlarının yapılabildiği Object Oriented Programlama dilinin temelini oluşturan bir yapıdır. Aşağıdaki örnekte bir Users adında bir sınıfımız ve içerisinde &lt;strong&gt;getter&lt;/strong&gt; ve &lt;strong&gt;setter&lt;/strong&gt; tanımlı olan iki public değişkenimiz var.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEmail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Class&lt;/strong&gt; yapısı hakkında kısa bir açıklama yaptıktan sonra şimdi &lt;strong&gt;Interface&lt;/strong&gt;(Arayüz) yapısına gelelim, Interface’de Class yapısına benzer bir yapıdadır, en kritik farklarından birisi içerisine metodun sadece tanımı eklenir burası biraz kafa karıştırıcı olabilir ama örnek ile anlaşılacağını düşünüyorum.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsersByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsersByEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsersById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yukarıda ki örnekte görüldüğü gibi &lt;strong&gt;Interface&lt;/strong&gt; tanımı &lt;strong&gt;Class&lt;/strong&gt; tanımına benziyor fakat en önemli özelliklerinden birisi sadece metod tanımlarını içermeleridir. Peki diyeceksiniz ki neden &lt;strong&gt;interface&lt;/strong&gt; kullanmamız gerekiyor? bu sorunun cevabını ancak fazlaca kod yazarak, deneyerek tecrübe ederek verebilirsiniz. Bir proje içerisinde kod yapısı arttıkça ve aynı kodlar kendini tekrarlamaya başlayınca çeşitli çözümler aranır, işte bu yapılar da dili işlevsel kullanmak için bir nevi araçtır. &lt;strong&gt;Interface&lt;/strong&gt; kullanmak geliştirme düzenli sağlar, &lt;strong&gt;Domain&lt;/strong&gt;(Proje iş yapısı) yapısına göre tasarlandıktan sonra ve metod tanımlarını &lt;strong&gt;implement&lt;/strong&gt; edildiği &lt;strong&gt;Class&lt;/strong&gt; içerisinde zorunlu kılar, bu da bir zorunluluk olduğundan daha düzenli bir geliştirmeye zorlar. &lt;strong&gt;Genel olarak birbirlerine göre farkları:&lt;/strong&gt; *Interface içerisinde metod tanımlarını barındırırken, Class içerisinde metodun kendisi vardır. * Abstract class base class olma özelliği taşır ve instance edilemez. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/09/abstract-class-instance-error.png&quot;&gt;Bknz&lt;/a&gt;: *Abstract olmayan class instance edilebilir ve implement de edilebilir. *Abstract class bir defa implement edilir fakat bir class’a birden fazla Interface implement edilebilir. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/09/abstract-class-birden-fazla-implement-edilemez.png&quot;&gt;Bknz-1&lt;/a&gt; , &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/09/interface-birden-fazla-implement-edilebilir.png&quot;&gt;Bknz-2&lt;/a&gt; *Interface içerisine tanımlanan metod implement edildiği Class içerisinde tanımlanmak zorundadır. &lt;strong&gt;Örnek&lt;/strong&gt; : public class UserService:&lt;span style=&quot;color: #99cc00;&quot;&gt;&lt;strong&gt;IUser&lt;/strong&gt;&lt;/span&gt;, &lt;strong&gt;&lt;span style=&quot;color: #008080;&quot;&gt;IUserLogs&lt;/span&gt;&lt;/strong&gt;{ } Yukarıdaki örnekte &lt;strong&gt;IUser&lt;/strong&gt; ve &lt;strong&gt;IUserLogs&lt;/strong&gt; interface(arayüzleri) UserService class’ına &lt;strong&gt;implement&lt;/strong&gt; edilmiştir. Interface tanımlarken ilk harf olarak &lt;strong&gt;I&lt;/strong&gt; harfini kod zorunlu kılmaz fakat geliştirici kuralları açısından doğru kullanım bu şekildedir. &lt;strong&gt;Interface ile ilgili basit bir örnek :&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IUser&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserEmailById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IUserLogs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserEntryCountById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUserLogs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DBEntities&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DBEntities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserEmailById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tblUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserEntryCountById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tblUserPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Biraz kafa karıştırıcı olabilir fakat kendiniz pratikler ve örnekler yaparak daha anlamlı yapılar ortaya çıkarabilirsiniz. Bir de vereceğim kavramları da araştırmanızı rica ediyorum. &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;&lt;strong&gt;K.I.S.S.(Keep İt Simple Stupid)&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;strong&gt;Single Responsebility&lt;/strong&gt;&lt;/a&gt;, &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;Seperation of Concerns&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control&lt;/a&gt;&lt;/strong&gt; bu kavramları araştırdıkça ve okudukça kafanıza daha iyi şeyler oturacağına eminim. Sevgilerle.&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/d27gTrPPAyk&quot; allowfullscreen=&quot;allowfullscreen&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Merhaba arkadaşlar, bugün sizlerle paylaşmak istediğim konu C# programlama dili içerisinde bulunan Class ve Interface yapıları ve aralarındaki farklar hakkında olacak. Öncelikle Class(Sınıf) nedir bu konuya değinelim, Class içerisinde metotlar, değişkenler hatta yine sınıf tanımlarının yapılabildiği Object Oriented Programlama dilinin temelini oluşturan bir yapıdır. Aşağıdaki örnekte bir Users adında bir sınıfımız ve içerisinde getter ve setter tanımlı olan iki public değişkenimiz var.</summary></entry><entry><title type="html">Git Repository üzerinden proje nasıl çekilir?</title><link href="http://localhost:4000/Git-Repository-uzerinden-proje-nasil-cekilir/" rel="alternate" type="text/html" title="Git Repository üzerinden proje nasıl çekilir?" /><published>2016-05-04T17:35:41+03:00</published><updated>2016-05-04T17:35:41+03:00</updated><id>http://localhost:4000/Git%20Repository%20uzerinden%20proje%20nasil%20cekilir</id><content type="html" xml:base="http://localhost:4000/Git-Repository-uzerinden-proje-nasil-cekilir/">&lt;p&gt;Merhaba arkadaşlar, git yazılarımın devamı olan bu yazımda yine sizlere ufak bilgiler aktarmaya çalışacağım. Hatırlarsanız önceki yazı serilerimde bitbucket üzerinde repository oluşturmayı, bir proje örneğini git server üzerine aktarmayı ve gitignore tanımlamasının nasıl yapıldığına dair yazılar paylaşmıştım. Bugün ise daha önceden sunucuya aktarılmış olan bir git repository’sini kendi bilgisayarımıza nasıl aktarılacağını inceleyeceğiz. Öncelikle bitbucket üzerinde çalışma yapıyorsak eğer repository detayındaki clone menüsüne tıkladığımızda bize bir &lt;strong&gt;git clone&lt;/strong&gt; linki veriyor ve her oluşturduğumuz repo içinde bir .&lt;strong&gt;git&lt;/strong&gt; uzantılı benzersiz bir link oluşturuyor.  Önceki projemizden bir ekran görüntüsü olan linki aşağıdaki şekilde görebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/2016/05/clone.png&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Var olan bir repository’i bilgisayarımıza almak için kullanmamız gereken komut git clone komutudur. Adından da anlaşılacağı üzere linki verilen proje reposunun clone’unu alarak bilgisayarımızdaki çalıştığımız dizine almamızı sağlar. Tüm ignore tanımlaması, config yapılandırılması ile birlikte tüm özellikleri barındırır.&lt;/p&gt;

&lt;p&gt;Ben çalışmalarımı &lt;strong&gt;CMDER.exe&lt;/strong&gt;  uygulaması üzerinden yaptığımdan dolayı örneklendirmeyi de onun üzerinden gerçekleştireceğim. &lt;strong&gt;CMDER.exe&lt;/strong&gt;‘yi çalıştırarak projeyi almak istediğimiz working directory’mize gidelim.&lt;/p&gt;

&lt;p&gt;Aşağıdaki gif imajını açarak uygulamanız gereken komutu örnek olarak görebilirsiniz.
&lt;img src=&quot;/Images/2016/05/bitbucket-git-clone.gif&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gördüğünüz gibi artık uzan sunucuda bulunan proje dosyalarımız &lt;strong&gt;C:\Projects&lt;/strong&gt; altında ve artık ortak bir projeyi bilgiayar dosya sistemine bağımlı kalmadan güvenli bir şekilde geliştirebiliriz.&lt;/p&gt;

&lt;p&gt;Dikkat etmeniz gereken noktalar ile ilgili ileride bir yazı yayımlayacağım fakat şimdilik aklıma gelen birkaç hususu belirteyim.&lt;/p&gt;

&lt;p&gt;Eğer projeyi sunucudan almışsak ve çalışıyorsak bu projemizde farklı bir arkadaşta geliştirme yapıyorsa ve o commit‘ini master branch‘e göndermişse ve bizde kendimiz farklı dosyalarda geliştirme yapıyorsak yapmamız gereken aşamalar aşağıdaki gibidir.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add *&lt;/code&gt; veya . bu tüm dosyaları baz alarak ekleme yapar. &lt;code class=&quot;highlighter-rouge&quot;&gt;git add – filename&lt;/code&gt; vererek sadece spesifik dosya aktarımı da yapabiliriz. Öncelikle add ile local repository’mize dosyalarımızı ekleyelim, sonrasında ise git commit -m “commit mesajınız” ile local commitimizi tamamlayalım. Sonrasında ise git pull –rebase origin master komutu ile var olan repository’mize master branch’imizin güncel halini alalım. Dosyalar güncellendikten sonra projemizi kontrol edip, son push ilemini gerçekleştirerek master branch üzerine dosyaların aktarımını sağlayalım.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt; komutunu kullanarak lokal repomuzdaki dosyalarımızı uzak sunucudaki repomuza göndererek &lt;strong&gt;master branch&lt;/strong&gt;‘imizi güncel tutalım.&lt;/p&gt;

&lt;p&gt;Bir yazının daha sonuna geldik umarım sizlere bir şeyler aktarabilmişimdir.&lt;/p&gt;

&lt;p&gt;Sorularınız, önerileriniz ve düzeltmeleriniz olur ise her zaman yorumlarınızı bekliyorum.&lt;/p&gt;

&lt;p&gt;Yazımı sevdiğim bir Barış Manço parçası ile sonlandırıyorum.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DxCLKJE7FVU?ecver=1&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Merhaba arkadaşlar, git yazılarımın devamı olan bu yazımda yine sizlere ufak bilgiler aktarmaya çalışacağım. Hatırlarsanız önceki yazı serilerimde bitbucket üzerinde repository oluşturmayı, bir proje örneğini git server üzerine aktarmayı ve gitignore tanımlamasının nasıl yapıldığına dair yazılar paylaşmıştım. Bugün ise daha önceden sunucuya aktarılmış olan bir git repository’sini kendi bilgisayarımıza nasıl aktarılacağını inceleyeceğiz. Öncelikle bitbucket üzerinde çalışma yapıyorsak eğer repository detayındaki clone menüsüne tıkladığımızda bize bir git clone linki veriyor ve her oluşturduğumuz repo içinde bir .git uzantılı benzersiz bir link oluşturuyor. Önceki projemizden bir ekran görüntüsü olan linki aşağıdaki şekilde görebilirsiniz.</summary></entry><entry><title type="html">Bitbucket üzerinde Repository Oluşturma ve Commit İşlemleri</title><link href="http://localhost:4000/Bitbucket-%C3%BCzerinde-Repository-Olu%C5%9Fturma-ve-Commit-%C4%B0%C5%9Flemleri/" rel="alternate" type="text/html" title="Bitbucket üzerinde Repository Oluşturma ve Commit İşlemleri " /><published>2016-04-03T17:35:41+03:00</published><updated>2016-04-03T17:35:41+03:00</updated><id>http://localhost:4000/Bitbucket%20%C3%BCzerinde%20Repository%20Olu%C5%9Fturma%20ve%20Commit%20%C4%B0%C5%9Flemleri</id><content type="html" xml:base="http://localhost:4000/Bitbucket-%C3%BCzerinde-Repository-Olu%C5%9Fturma-ve-Commit-%C4%B0%C5%9Flemleri/">&lt;p&gt;Merhaba arkadaşlar önceki yazım olan &lt;a href=&quot;http://www.akinabdullahoglu.com/bitbucket-nedir/&quot;&gt;Bitbucket Nedir?&lt;/a&gt; yazısının serisine devam olan bu yazımda &lt;strong&gt;Bitbucket&lt;/strong&gt; üzerinde bir repository oluşturup ilk projemizi bu repomuza göndereceğiz. Öncelikle izlenilmesi gereken adımları tekrar hatırlayalım.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/03/bitbucket.gif&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/03/bitbucket-300x225.gif&quot; alt=&quot;bitbucket&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitbucket’a üye olmak&lt;/li&gt;
  &lt;li&gt;Bitbucket üyeliğinin aktif edilmesi&lt;/li&gt;
  &lt;li&gt;Bitbucket’a giriş yapılması&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dashboard&lt;/strong&gt; ekranına giriş yaptıktan sonra &lt;strong&gt;Repositories&lt;/strong&gt; menüsünden &lt;strong&gt;Create Repository&lt;/strong&gt; sekmesine tıklıyoruz. Aşağıdaki gibi bir pencere karşımıza çıkıyor. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/first-training-1.png&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/first-training-1-300x295.png&quot; alt=&quot;first-training-1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Owner&lt;/strong&gt; : bu oluşturacağımız repository’e yani projemizin kaynak kodlarının sahibini seçiyoruz. Kaldırma ve ana konfigürasyonları yapabilecek kullanıcı yada kullanıcıları. Çoğul kullanıcı seçimi yapılacaksa Team oluşturulması gerekmektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository Name&lt;/strong&gt; : Kaynak kodlarımızın tutulacağı deponun adı yani aslında projemizin adı diyebiliriz. Buraya verilen isim alias olarak unique bir şekilde kullanılacaktır. &lt;strong&gt;Örn : rootturk@bitbucket.org/test-project.git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access level&lt;/strong&gt; : &lt;input id=&quot;id_is_private&quot; class=&quot; checkbox&quot; checked=&quot;checked&quot; name=&quot;is_private&quot; type=&quot;checkbox&quot; /&gt;&lt;label for=&quot;id_is_private&quot;&gt;This is a private repository &lt;/label&gt; Bu seçenek işaretlenirse repomuz gizli olur ve sadece owner grubunda olanlar ya da sonradan erişim verdiğimiz kullanıcılar projemize erişim sağlayabilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository Type&lt;/strong&gt; : Tutulacak repository’nin .git mi yoksa mercurial mi olacağının seçimini yapıyoruz. Ben .git kullanıyorum ve bu yazımda .git üzerinden örneklendirerek devam edeceğim. Mercurial hakkında bilgiler için https://www.mercurial-scm.org/ kendi sitesinden detaylarına bakabilirsiniz. Bu da TFS, SVN, GIT, Sub-Version gibi bir source-control management aracıdır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt; : Projemiz hakkında açıklama alanı.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forking&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Allow Only Private Forking&lt;/strong&gt; : Yetkili kullanıcıların projeyi kendi kullanıcı adı altındaki projelere kopya olarak oluşturulmasına izin verir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Allow Forks&lt;/strong&gt; : Tüm erişim izni olan ya da olmayan kullanıcıların projeyi kendi kullanıcı adı altındaki repository’e kopyasının oluşturabilmesine izin verir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Forks :&lt;/strong&gt; Kopyalama erişimi sağlamaz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Management&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Issue Tracking&lt;/strong&gt; : Oluşturulan projenin JIRA tarzı bir bug-tracking özelliğini aktif ederek hata yönetiminin yapılmasına olanak sağlar.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Wiki&lt;/strong&gt; : Projenin dökümantasyonunu ve yapısının yazılı olarak sağlanabileceği bir döküman yönetimi modülüdür.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt; : Projenin yazıldığı programlama dili seçimi, sanırım proje detayında açıklama olarak gösterilmesini sağlamakta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable HipChat notifications :&lt;/strong&gt; bu seçim işaretlenirse &lt;strong&gt;Atlassian&lt;/strong&gt; ürünü olan HipChat mesajlaşma uygulamasına bu projeyi entegre ederek üzerinde Conversation(Sohbet) tarzı bir yaklaşım uygulanabilir. Alanları kendimize göre doldurup Create butonuna bastıktan sonra eğer eksik ya da yanlış bilgi girişi olmamış ise aşağıdaki şekilde bir ekran karşımıza çıkacaktır. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/first-training-2.png&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/first-training-2-300x147.png&quot; alt=&quot;first-training-2&quot; /&gt;&lt;/a&gt; Görüldüğü gibi artık kendi kullanıcı adımız altında bir .git repomuz oldu. Artık bilgisayarımızda bulunan kaynak kodlarımızı bu repo’ya yükleyebiliriz. Ama tabii ki bunu yapmamız için öncelikle Windows için Git eklentisini kurmamız gerekmektedir. Aşağıdaki link’e giderek işletim sisteminiz için uyumlu olan .git sürümünü indirebilirsiniz. &lt;strong&gt;https://git-scm.com/downloads&lt;/strong&gt; Kurulumu basit olduğundan dolayı bu detaya girmiyorum. Kurulumu yaptıktan sonra artık bilgisayarımıza .git server üzerinde tutulan repo’ları çekip- gönderebiliriz. Şimdi sıra geldi kodlarımızı nasıl göndereceğimiz sorusuna. Bunun için çeşitli &lt;strong&gt;GUI(Graphic User Interface)&lt;/strong&gt; yani görsel arayüzü olan uygulamalar ya da konsol uygulamaları mevcut. &lt;strong&gt;Bitbucket&lt;/strong&gt;‘ın kendi ürünü olan &lt;strong&gt;SourceTree&lt;/strong&gt; entegre bir şekilde başarıyla çalışmaktadır. Fakat bana &lt;strong&gt;&lt;a href=&quot;http://cmder.net/&quot;&gt;cmder.exe&lt;/a&gt;&lt;/strong&gt; uygulaması ya da git yükledikten sonra çalışabileceğimiz konsol uygulaması pratik geliyor ve harici bir programa henüz gereksinim duymadım. Zaten çoğu IDE için .git eklentisi uygulama içerisinde başarıyla çalışmaktadır. Intellij olsun Visual Studio olsun hepsinde çalışabilirsiniz ama temel mantığı öğrenmek ve daha detaylı işlemlerde ya da hatalı durumlarda düzeltme yapmak konsol kullanımında kolayca çözülebiliyor. &lt;strong&gt;Nedir bu CMDER?&lt;/strong&gt; &lt;strong&gt;CMDER.exe&lt;/strong&gt; bir konsol emülator uygulamasıdır, kendi içerisinde windows’un konsol uygulamasından özelleştirilmiş bir çok özelliğini barındırır ve özelleştirilebilir yapısıyla kullanıcıya pratiklik kazandırır. &lt;strong&gt;http://cmder.net/&lt;/strong&gt; linki üzerinden daha detaylı olarak bakabilirsiniz. .&lt;strong&gt;GIT&lt;/strong&gt;‘i de bu konsol uygulaması içerisinden rahat bir şekilde kullanabilirsiniz. Çok detaylı bir uygulama gerçekten fakat ben burada ana konuyu kaybetmemek adına direk olarak kaynak kodlarımızın gönderimine geçeceğim. Sorularınızı her zaman belirtebilirsiniz, zamanım oldukça yardımcı olmaya çalışırım. Örnek olarak aşağıdaki gibi bir proje üzerinden ilerleyelim. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/first-training-3.png&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/first-training-3-300x148.png&quot; alt=&quot;first-training-3&quot; /&gt;&lt;/a&gt; &lt;strong&gt;CMDER.exe&lt;/strong&gt;‘yi indirdiğimizi düşünerek ilerliyorum. Standart konsol komutları + unix komutlarını da kullanabiliyorsunuz. &lt;strong&gt;CMDER.exe&lt;/strong&gt;‘yi çalıştırdıktan sonra aşağıdaki gibi bir ekran ile karşılaşıyoruz. cd komutu ile projemin bulunduğu dizine gidiyorum. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/first-training-4.png&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/first-training-4-300x225.png&quot; alt=&quot;first-training-4&quot; /&gt;&lt;/a&gt; Sonrasında yapmamız gerek local bir git reposu oluşturmak olacaktır. Bunu yapmak için yazmamız gereken komut. &lt;strong&gt;git init&lt;/strong&gt; komutudur. Aşağıdaki resim uzantılıdır hareketli olarak görmek için yeni pencerede açınız. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/bitbucket-gif-1.gif&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/bitbucket-gif-1-300x182.gif&quot; alt=&quot;bitbucket-gif-1&quot; /&gt;&lt;/a&gt; Komutu yazdıktan sonra proje klasörüne gittiğimizde &lt;strong&gt;.git&lt;/strong&gt; isimli bir klasör oluştuğunu görürüz. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/bitbucket-gif-2.gif&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/bitbucket-gif-2-300x182.gif&quot; alt=&quot;bitbucket-gif-2&quot; /&gt;&lt;/a&gt; &lt;strong&gt;git init&lt;/strong&gt; yaptıktan sonra kendi sistem dosyalarını &lt;strong&gt;repository&lt;/strong&gt; altına oluşturur ve bu kısımdan sonra her şey bu dosyalara bağımlı bir şekilde ilerler. Şimdi yapmamız gereken ise bu oluşturduğumuz repomuzun uzak sunucudaki alanını tanıtmak olacaktır. Bunu ise şu komut ile yapıyor olacağız, &lt;strong&gt;Bitbucket&lt;/strong&gt; ekranında ilk repo ekledikten sonra açılan pencerede görebiliriz. &lt;a href=&quot;http://www.akinabdullahoglu.com/Images/2016/04/bitbucket-remote-add.png&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/bitbucket-remote-add-300x106.png&quot; alt=&quot;bitbucket-remote-add&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;komut--git-remote-add-origin-httpsrootturkbitbucketorgrootturkfirst-bitbucket-projectgit-şeklindedir-her-kullanıcının-kendi-repository-ve-kullanıcı-adına-göre-değişkenlik-gösterir&quot;&gt;&lt;strong&gt;Komut&lt;/strong&gt; : &lt;span style=&quot;color: #993300;&quot;&gt;&lt;strong&gt;git remote add origin https://rootturk@bitbucket.org/rootturk/first-bitbucket-project.git&lt;/strong&gt;&lt;/span&gt; şeklindedir. Her kullanıcının kendi repository ve kullanıcı adına göre değişkenlik gösterir.&lt;/h4&gt;

&lt;p&gt;Bu komutu &lt;strong&gt;çalıştırdıktan&lt;/strong&gt; sonra &lt;strong&gt;bitbucket&lt;/strong&gt; üzerindeki etki alanımızı lokalde bulunan git etki alanımıza tanıtmış oluyoruz ve artık kaynak kod dosyalarımızı repomuza ekleyip commit ve push işlemlerini gerçekleştirebiliriz.(Detaylarını &lt;strong&gt;.git config i&lt;/strong&gt;çerisinden görebilirsiniz.) &lt;strong&gt;git add .&lt;/strong&gt; ya da &lt;strong&gt;git add *** kullanarak kaynak kodlarımızı lokal repository’mize ekliyoruz. sonrasında **git commit -m “yaptığımız değişiklik detayı”&lt;/strong&gt; kendinize göre bir mesaj yazarak komutu çalıştırıyoruz. Artık dosyalarımız gönderilmeye hazır ve son kalan komut &lt;strong&gt;push&lt;/strong&gt; yani göndermek olacaktır. &lt;strong&gt;git push origin master&lt;/strong&gt; komutunu yazarak kaynak kodlarımızı bitbucket hesabımız altındaki repository’mize gönderme isteğini iletiyoruz. Sonrasında bize bir mesaj ile remote-add yaptığımız için şifremizi soruyor. Şifremizi de girdikten sonra kendi compress işlemlerinden sonra kaynak kodlarımız artık bitbucket üzerindeki repository’mize gönderiliyor. İşlemleri sırası ile yaptığım &lt;strong&gt;.gif&lt;/strong&gt; resmini aşağıda görebilirsiniz. &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/bitbucket-add-commit-push.gif&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/bitbucket-add-commit-push-300x182.gif&quot; alt=&quot;bitbucket-add-commit-push&quot; /&gt;&lt;/a&gt;   Şimdi &lt;strong&gt;bitbucket&lt;/strong&gt; hesabımızdan repository’mize bakalım ki kodlarımız gitmiş mi? &lt;a href=&quot;http://www.akinabdullahoglu.com/wp-content/uploads/2016/04/bitbucket-source-commits.gif&quot;&gt;&lt;img src=&quot;http://www.akinabdullahoglu.com/Images/2016/04/bitbucket-source-commits-300x139.gif&quot; alt=&quot;bitbucket-source-commits&quot; /&gt;&lt;/a&gt; Gördüğümüz gibi kaynak kodlarımız artık bitbucket hesabımız üzerinde. Genel olarak ilk yazının devamı olan bu yazımda bir repository oluşturmayı ve kaynak kodlarımızı bu repository altına göndermeyi işlemeye çalıştım.Sonraki yazı serilerimde yine bitbucket’a devam edeceğim. Umarım yararlı bir yazı olmuştur. Her türlü yanlış kullanım, hatalı gördüğünüz yerlerle ilgili bilgi ve istekleri, sorularınızı &lt;strong&gt;yorum&lt;/strong&gt; ya da &lt;strong&gt;email&lt;/strong&gt; olarak iletebilirsiniz. Okuduğunuz için teşekkür ederim.&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/79vCiXg3njY&quot; allowfullscreen=&quot;allowfullscreen&quot; width=&quot;420&quot; height=&quot;315&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Merhaba arkadaşlar önceki yazım olan Bitbucket Nedir? yazısının serisine devam olan bu yazımda Bitbucket üzerinde bir repository oluşturup ilk projemizi bu repomuza göndereceğiz. Öncelikle izlenilmesi gereken adımları tekrar hatırlayalım.</summary></entry></feed>